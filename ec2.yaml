# Indicates the format version of the CloudFormation template.
AWSTemplateFormatVersion: 2010-09-09
Description: This script creates an EC2 instance, a security group and allows traffic on ports 80, 443 and 22. It also returns the PublicDNS of the created EC2 instance.

# Defines input parameters that are passed when creating the stack. In this case, it takes two parameters:
Parameters:
# Defines two Parameter Option for Deploying the new EC2 Instance dev and test
  EnvironmentType:
    Description: "Specify the Type of the EC2."
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
    ConstraintDescription: must specify dev, or test.
  KeyPairName:  # KeyPair Parameter where you can chose your KeyPair File Name z.b dam-auto which is refering on the dam-auto.pem File in the same Folder
    Type: String
    Description: The name of an existing Amazon EC2 key pair to SSH into the Amazon EC2 instances.

# It maps the EnvironmentType parameter to the corresponding InstanceType of the EC2 instance.
Mappings:
  EnvironmentToInstanceType:
    dev:
      InstanceType: t2.nano
    test:
      InstanceType: t2.micro

# Defines the AWS resources that are created as part of the stack.
Resources:
  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0778521d914d23bc1 # ImageID valid only in us-east-1 region for Ubuntu 20.04
      InstanceType:  # An EC2 instance of type t2.nano or t2.micro depending on the EnvironmentType passed as parameter
        !FindInMap [
          EnvironmentToInstanceType,
        !Ref EnvironmentType,
          InstanceType,
        ]
      KeyName: !Ref KeyPairName # <-- Change to use your key-pair name dam-tbz-key
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup

# A security group that allows inbound traffic on ports 80, 443 and 22 and outbound traffic.
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-security-group, !Ref EnvironmentType]] # The name of the security group is based on the EnvironmentType passed as parameter
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# Defines the output values that are returned after the stack is created
Outputs:
    # Make a commend how to connect to Maschine: ssh -i "YOUR_KEY_PAIR_NAME.pem" ec2-user@WebServerPublicDNS    | ssh -i "dam-auto.pem" ubuntu@ec2-3-83-156-73.compute-1.amazonaws.com

    # It returns the PublicDNS of the EC2 instance and Shows how to Connect to the EC2 Instance in the Description
   PublicDNS:
    Description: "ssh -i YOUR_KEY_PAIR_NAME.pem ubuntu@WebServerPublicDNS"
    Value: !GetAtt WebAppInstance.PublicDnsName

    #NEw Try
   PublicConnect:
    Description: "ssh -i YOUR_KEY_PAIR_NAME.pem ubuntu@WebServerPublicDNS"
    Value: !Join ["", [ssh -i , " " ,  !Ref KeyPairName,.pem ubuntu@,  !GetAtt WebAppInstance.PublicDnsName]]

#   GroupName: !Join ["-", [webapp-security-group, !Ref EnvironmentType]]